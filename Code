#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/ipc.h>
#include <sys/shm.h>

#define NUM_PROCESSES 2
#define NUM_THREADS 4
#define SHM_SIZE 1024

// Shared memory key
#define SHM_KEY 1234

// Data structure for shared memory
typedef struct {
    int data;
    pthread_mutex_t mutex;
} shared_data_t;

// Function to simulate parallel mathematical operations
void* parallel_math(void* arg) {
    int* num = (int*)arg;
    *num = *num * *num; // Square the number
    return NULL;
}

int main() {
    // Create shared memory segment
    int shmid = shmget(SHM_KEY, sizeof(shared_data_t), IPC_CREAT | 0666);
    if (shmid < 0) {
        perror("shmget");
        exit(EXIT_FAILURE);
    }

    // Attach shared memory
    shared_data_t* data = (shared_data_t*)shmat(shmid, NULL, 0);
    if (data == (void*)-1) {
        perror("shmat");
        exit(EXIT_FAILURE);
    }

    // Initialize shared data
    data->data = 10; // Initial value
    pthread_mutex_init(&data->mutex, NULL);

    // Create processes
    for (int i = 0; i < NUM_PROCESSES; i++) {
        pid_t pid = fork();
        if (pid == 0) { // Child process
            // Create threads
            pthread_t threads[NUM_THREADS];
            for (int j = 0; j < NUM_THREADS; j++) {
                if (pthread_create(&threads[j], NULL, parallel_math, &data->data) != 0) {
                    perror("pthread_create");
                    exit(EXIT_FAILURE);
                }
            }

            // Wait for threads to finish
            for (int j = 0; j < NUM_THREADS; j++) {
                pthread_join(threads[j], NULL);
            }

            // Print the squared number
            printf("Process %d: %d\n", i, data->data);

            exit(EXIT_SUCCESS);
        } else if (pid < 0) {
            perror("fork");
            exit(EXIT_FAILURE);
        }
    }

    // Wait for all processes to finish
    for (int i = 0; i < NUM_PROCESSES; i++) {
        wait(NULL);
    }

    // Detach and remove shared memory
    pthread_mutex_destroy(&data->mutex);
    shmdt(data);
    shmctl(shmid, IPC_RMID, NULL);

    return 0;
}
